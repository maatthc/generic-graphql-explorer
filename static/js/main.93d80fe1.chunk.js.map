{"version":3,"sources":["CustomArgs.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["unwrapOutputType","outputType","unwrappedType","isWrappingType","ofType","makeDefaultArg","parentField","arg","type","name","startsWith","endsWith","getDefaultScalarArgValue","argType","kind","value","isEnumType","getValues","map","x","includes","GraphiQLExplorer","defaultValue","endPoint","token","authenticationMethod","availableAuthenticationMethods","fetcher","params","fetch","method","headers","Accept","Authorization","body","JSON","stringify","then","response","text","responseBody","parse","e","Promise","resolve","console","log","App","props","_graphiql","state","query","explorerIsOpen","show","_handleInspectOperation","cm","mousePos","parsedQuery","error","getTokenAt","start","line","ch","end","position","indexFromPos","def","definitions","find","definition","loc","operationKind","operation","operationName","selector","el","document","querySelector","scrollIntoView","_handleEditQuery","setState","_handleToggleExplorer","GraphiQL","handleShowConfig","bind","handleSave","handleExit","this","length","updateSchema","event","preventDefault","currentTarget","getIntrospectionQuery","result","editor","getQueryEditor","setOption","options","extraKeys","data","schema","buildClientSchema","className","Modal","onHide","onExit","backdrop","keyboard","centered","Header","closeButton","Title","Body","InputGroup","FormControl","placeholder","aria-label","aria-describedby","onChange","DropdownButton","id","title","index","Dropdown","Item","key","Footer","Button","variant","onClick","onEdit","onRunOperation","handleRunQuery","onToggleExplorer","ref","onEditQuery","Toolbar","handlePrettifyQuery","label","handleToggleHistory","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.93d80fe1.chunk.js","sourcesContent":["import { isEnumType, isWrappingType } from 'graphql'\nimport type {\n    GraphQLField,\n    GraphQLArgument,\n    GraphQLInputField,\n    GraphQLEnumType,\n    GraphQLOutputType,\n    GraphQLScalarType,\n    ValueNode,\n} from 'graphql'\nimport GraphiQLExplorer from 'graphiql-explorer'\n\nfunction unwrapOutputType(outputType: GraphQLOutputType) {\n    let unwrappedType = outputType\n    while (isWrappingType(unwrappedType)) {\n        unwrappedType = unwrappedType.ofType\n    }\n    return unwrappedType\n}\n\nexport function makeDefaultArg(\n    parentField: GraphQLField<any, any>,\n    arg: GraphQLArgument | GraphQLInputField\n): boolean {\n    const unwrappedType = unwrapOutputType(parentField.type)\n    if (\n        unwrappedType.name.startsWith('GitHub') &&\n        unwrappedType.name.endsWith('Connection') &&\n        (arg.name === 'first' || arg.name === 'orderBy')\n    ) {\n        return true\n    }\n    return false\n}\n\nexport function getDefaultScalarArgValue(\n    parentField: GraphQLField<any, any>,\n    arg: GraphQLArgument | GraphQLInputField,\n    argType: GraphQLEnumType | GraphQLScalarType\n): ValueNode {\n    const unwrappedType = unwrapOutputType(parentField.type)\n    switch (unwrappedType.name) {\n        case 'GitHubRepository':\n            if (arg.name === 'name') {\n                return { kind: 'StringValue', value: 'graphql-js' }\n            } else if (arg.name === 'owner') {\n                return { kind: 'StringValue', value: 'graphql' }\n            }\n            break\n        case 'NpmPackage':\n            if (arg.name === 'name') {\n                return { kind: 'StringValue', value: 'graphql' }\n            }\n            break\n        default:\n            if (\n                isEnumType(argType) &&\n                unwrappedType.name.startsWith('GitHub') &&\n                unwrappedType.name.endsWith('Connection')\n            ) {\n                if (\n                    arg.name === 'direction' &&\n                    argType\n                        .getValues()\n                        .map((x) => x.name)\n                        .includes('DESC')\n                ) {\n                    return { kind: 'EnumValue', value: 'DESC' }\n                } else if (\n                    arg.name === 'field' &&\n                    argType\n                        .getValues()\n                        .map((x) => x.name)\n                        .includes('CREATED_AT')\n                ) {\n                    return { kind: 'EnumValue', value: 'CREATED_AT' }\n                }\n            }\n            return GraphiQLExplorer.defaultValue(argType)\n    }\n    return GraphiQLExplorer.defaultValue(argType)\n}\n","import React from 'react'\nimport GraphiQL from 'graphiql'\n// import { IntrospectionQuery } from 'graphql'\nimport { buildClientSchema, getIntrospectionQuery, parse } from 'graphql'\nimport type { GraphQLSchema } from 'graphql'\nimport GraphiQLExplorer from 'graphiql-explorer'\nimport {\n    Modal,\n    Button,\n    InputGroup,\n    FormControl,\n    Dropdown,\n    DropdownButton,\n} from 'react-bootstrap'\n\nimport { makeDefaultArg, getDefaultScalarArgValue } from './CustomArgs'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'graphiql/graphiql.css'\nimport './App.css'\n\nlet endPoint: string\nlet token: string\nlet authenticationMethod: string\nconst availableAuthenticationMethods = ['Bearer', 'Basic', 'Digest']\n\nfunction fetcher(params: unknown) {\n    if (authenticationMethod === 'Bearer') {\n        if (!token) return Promise.resolve('')\n        return fetch(endPoint, {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                Authorization: `Bearer ${token}`,\n            },\n            body: JSON.stringify(params),\n        })\n            .then(function (response) {\n                return response.text()\n            })\n            .then(function (responseBody) {\n                try {\n                    return JSON.parse(responseBody)\n                } catch (e) {\n                    return responseBody\n                }\n            })\n    } else {\n        console.log(\n            `'Authentication Method \"${authenticationMethod}\" not yet implemented!`\n        )\n        return Promise.resolve('') // TODO: Implement other auth methods\n    }\n}\n\nconst DEFAULT_QUERY = `# shift-option/alt-click on a query below to jump to it in the explorer\n# option/alt-click on a field in the explorer to select all subfields\nquery MyQuery {\n    organization(slug: \"\") {\n      name\n      teams(first: 10) {\n        edges {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }`\n\ntype State = {\n    schema?: GraphQLSchema\n    query?: string\n    explorerIsOpen?: boolean\n    show?: boolean\n    token?: string\n    endPoint?: string\n    authenticationMethod?: string\n}\n\nclass App extends React.Component<unknown, State> {\n    private _graphiql: GraphiQL\n    state: State = {\n        query: DEFAULT_QUERY,\n        explorerIsOpen: true,\n        show: false,\n        token: '',\n        endPoint: '',\n        authenticationMethod: availableAuthenticationMethods[0],\n    }\n\n    constructor(props: unknown) {\n        super(props)\n        this._graphiql = new GraphiQL({ fetcher })\n        this.handleShowConfig = this.handleShowConfig.bind(this)\n        this.handleSave = this.handleSave.bind(this)\n        this.handleExit = this.handleExit.bind(this)\n    }\n\n    handleSave(): void {\n        authenticationMethod = this.state?.authenticationMethod || ''\n        token = this.state?.token || ''\n        endPoint = this.state?.endPoint || ''\n        if (authenticationMethod !== 'Bearer') return\n        if (token.length < 40) return\n        if (endPoint.length < 10) return\n        this.setState({ show: false })\n        this.updateSchema()\n    }\n\n    handleShowConfig(): void {\n        this.setState({ show: true })\n    }\n\n    handleExit(): void {\n        this.handleSave()\n    }\n\n    onChange(event: any): void {\n        // Intended to run on the change of every form component\n        event.preventDefault()\n        console.log('event.currentTarget.name', event.currentTarget.name)\n        console.log('event.currentTarget.value', event.currentTarget.value)\n\n        this.setState({\n            [event.currentTarget.name]: event.currentTarget.value,\n        })\n    }\n\n    updateSchema(): void {\n        if (token)\n            fetcher({\n                query: getIntrospectionQuery(),\n            }).then((result) => {\n                const editor = this._graphiql.getQueryEditor()\n                editor.setOption('extraKeys', {\n                    ...(editor.options.extraKeys || {}),\n                    'Shift-Alt-LeftClick': this._handleInspectOperation,\n                })\n                if (result.data)\n                    this.setState({ schema: buildClientSchema(result.data) })\n            })\n    }\n\n    componentDidMount(): void {\n        if (!token) this.handleShowConfig()\n        else this.updateSchema()\n    }\n\n    _handleInspectOperation = (\n        cm: any,\n        mousePos: { line: number; ch: number }\n    ) => {\n        const parsedQuery = parse(this.state.query || '')\n\n        if (!parsedQuery) {\n            console.error(\"Couldn't parse query document\")\n            return null\n        }\n\n        const token = cm.getTokenAt(mousePos)\n        const start = { line: mousePos.line, ch: token.start }\n        const end = { line: mousePos.line, ch: token.end }\n        const relevantMousePos = {\n            start: cm.indexFromPos(start),\n            end: cm.indexFromPos(end),\n        }\n\n        const position = relevantMousePos\n\n        const def = parsedQuery.definitions.find((definition) => {\n            if (!definition.loc) {\n                console.log('Missing location information for definition')\n                return false\n            }\n\n            const { start, end } = definition.loc\n            return start <= position.start && end >= position.end\n        })\n\n        if (!def) {\n            console.error(\n                'Unable to find definition corresponding to mouse position'\n            )\n            return null\n        }\n\n        const operationKind =\n            def.kind === 'OperationDefinition'\n                ? def.operation\n                : def.kind === 'FragmentDefinition'\n                ? 'fragment'\n                : 'unknown'\n\n        const operationName =\n            def.kind === 'OperationDefinition' && !!def.name\n                ? def.name.value\n                : def.kind === 'FragmentDefinition' && !!def.name\n                ? def.name.value\n                : 'unknown'\n\n        const selector = `.graphiql-explorer-root #${operationKind}-${operationName}`\n\n        const el = document.querySelector(selector)\n        el && el.scrollIntoView()\n    }\n\n    _handleEditQuery = (query: string | undefined): void => {\n        query = query ? query : ''\n        this.setState({ query })\n    }\n\n    _handleToggleExplorer = (): void => {\n        this.setState({ explorerIsOpen: !this.state.explorerIsOpen })\n    }\n\n    render() {\n        const { query, schema } = this.state\n        return (\n            <div className=\"graphiql-container\">\n                <Modal\n                    show={this.state.show}\n                    onHide={this.handleSave}\n                    onExit={this.handleExit}\n                    backdrop=\"static\"\n                    keyboard={false}\n                    centered\n                >\n                    <Modal.Header closeButton>\n                        <Modal.Title>Configuration</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <InputGroup className=\"mb-3\">\n                            <FormControl\n                                name=\"endPoint\"\n                                placeholder=\"Enter GraphQL API Endpoint\"\n                                aria-label=\"Enter GraphQL API Endpoint\"\n                                aria-describedby=\"basic-addon2\"\n                                value={this.state.endPoint}\n                                onChange={(e) => this.onChange(e)}\n                            />\n                        </InputGroup>\n                        <br />\n                        <InputGroup className=\"mb-3\">\n                            <DropdownButton\n                                id=\"authenticationMethods\"\n                                title={this.state.authenticationMethod}\n                            >\n                                {availableAuthenticationMethods.map(\n                                    (method, index) => (\n                                        <Dropdown.Item key={index}>\n                                            {method}\n                                        </Dropdown.Item>\n                                    )\n                                )}\n                            </DropdownButton>\n                            <FormControl\n                                name=\"token\"\n                                placeholder=\"Enter GraphQL API Access Token\"\n                                aria-label=\"Enter GraphQL API Access Token\"\n                                aria-describedby=\"basic-addon2\"\n                                value={this.state.token}\n                                onChange={(e) => this.onChange(e)}\n                            />\n                        </InputGroup>\n                        <p className=\"text-muted\">\n                            <small>\n                                Your token will be only shared with the GraphQL\n                                endpoint.\n                            </small>\n                        </p>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"primary\" onClick={this.handleSave}>\n                            Continue\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n                <GraphiQLExplorer\n                    schema={schema}\n                    query={query}\n                    onEdit={this._handleEditQuery}\n                    onRunOperation={(operationName: any) =>\n                        this._graphiql.handleRunQuery(operationName)\n                    }\n                    explorerIsOpen={this.state.explorerIsOpen}\n                    onToggleExplorer={this._handleToggleExplorer}\n                    getDefaultScalarArgValue={getDefaultScalarArgValue}\n                    makeDefaultArg={makeDefaultArg}\n                />\n                <GraphiQL\n                    ref={(ref) => (this._graphiql = ref!)}\n                    fetcher={fetcher}\n                    schema={schema}\n                    query={query}\n                    response=\"No results yet..\"\n                    onEditQuery={this._handleEditQuery}\n                >\n                    <GraphiQL.Toolbar>\n                        <GraphiQL.Button\n                            onClick={() => this._graphiql.handlePrettifyQuery()}\n                            label=\"Prettify\"\n                            title=\"Prettify Query (Shift-Ctrl-P)\"\n                        />\n                        <GraphiQL.Button\n                            onClick={() => this._graphiql.handleToggleHistory()}\n                            label=\"History\"\n                            title=\"Show History\"\n                        />\n                        <GraphiQL.Button\n                            onClick={this._handleToggleExplorer}\n                            label=\"Explorer\"\n                            title=\"Toggle Explorer\"\n                        />\n                        <GraphiQL.Button\n                            onClick={this.handleShowConfig}\n                            label=\"Configuration\"\n                            title=\"Change Configuration\"\n                        />\n                    </GraphiQL.Toolbar>\n                </GraphiQL>\n            </div>\n        )\n    }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n)\n\nexport function register(config: any) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config: any) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: any) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister()\n        })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}